package compilador.sintactic;

import java_cup.runtime.*;
import compilador.sintactic.symbols.*;
import codiEnsamblador.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

class Parser;

parser code {: 
  @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
        Error er=new Error();
        er.causaError=msg.toString();
        GeneraEnsablador e= new GeneraEnsablador(); 
        e.generaError68k();
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }
:};

action code {: int nv = 0; int np = 0; int nivel = 0; TablaVariables tv = new TablaVariables(); TABLASIMBOLOS TS = new TABLASIMBOLOS(); TablaProcedimientos tp = new TablaProcedimientos(); Codi3A c3a = new Codi3A(); Etiqueta e = new Etiqueta(); 
               Error er=new Error();
    :}

terminal                COND,ADD,SUB,LPAREN,RPAREN,MENOR,MAYOR,IGUAL,LCLAVE,ENTER;
terminal                RCLAVE,DIV,MUL,MOD,NEWLINE,MAIN,MAYIG,MENIG,ECOND,PNTCM,MENTRES;
terminal                BOOL,CONST,COMA,NULL,LECT,SORT,NO,VOID,RETORNA,AND,OR,FUNC;
terminal      String    numero;
terminal      String    ID;
terminal      String    VBOOL;

non terminal  SymbolI        I;
non terminal  SymbolP        P;
non terminal  Symbolinstr    instr;
non terminal  SymbolCND      CND;
non terminal  SymbolSCND     SCND;
non terminal  SymbolCCND     CCND;
non terminal  SymbolEL       EL;
non terminal  SymbolELp      ELp;
non terminal  SymbolSENTS    SENTS;
non terminal  SymbolEB       EB;
non terminal  SymbolENCAP    ENCAP;
non terminal  SymbolTE_ARGS1 TE_ARGS1;
non terminal  SymbolSubP     SUBP;
non terminal  SymbolSortTec  SortTec;
non terminal  SymbolM        M;
non terminal  SymbolCM       CM;
non terminal  SymbolMm       Mm;
non terminal  SymbolRetInstr RetInstr;
non terminal  SymbolAO       AO;
non terminal  SymbolAOp      AOp;
non terminal  SymbolENTRAB   ENTRAB;
non terminal  SymbolSURTB    SURTB;
non terminal  SymbolCRIDAS   CRIDAS;
non terminal  SymbolPARAM    PARAM;
non terminal  SymbolMAINSKIP MAINSKIP;

precedence left  ADD, SUB, ECOND;
start with I;

I     ::= SUBP MAIN LPAREN RPAREN LCLAVE NEWLINE MAINSKIP P NEWLINE RCLAVE                                          {: RESULT = new SymbolI();
                                                                                                                    c3a.imprimeC3A();
                                                                                                                    c3a.generaFicheroC3A();
                                                                                                                    GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                    e.generaCodi68k();                                                                                                                       
                                                                                                                    :}
    ;

SUBP  ::=  FUNC ENTER ENTRAB ENCAP:e2 LCLAVE NEWLINE P NEWLINE RetInstr:e3 SURTB NEWLINE RCLAVE NEWLINE SUBP                      {: RESULT = new SymbolSubP();
                                                                                                                if(e3.esBool){
                                                                                                                //System.out.println("ERROR: DEBE DEVOLVER ENTERO");
                                                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));                                                                                                                                                                                              
                                                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": DEBE DEVOLVER ENTERO";
                                                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                e.generaError68k();
                                                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": DEBE DEVOLVER ENTERO");
                                                                                                                }
                                                                                                                tp.getProcedimiento(e2.id).tipo=tipoSub.tipoSubInt;
                                                                                                                //TOCA REVISAR ANTES DE HACER                                                                                                                
                                                                                                                :}
    |     FUNC BOOL ENTRAB ENCAP:e2 LCLAVE NEWLINE P NEWLINE  RetInstr:e3 SURTB NEWLINE RCLAVE NEWLINE SUBP     {:         RESULT = new SymbolSubP(); 
                                                                                                                if(!e3.esBool){
                                                                                                                //System.out.println("ERROR: DEBE DEVOLVER BOOLEANO");
                                                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": ERROR: DEBE DEVOLVER BOOLEANO";
                                                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                e.generaError68k();
                                                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": ERROR: DEBE DEVOLVER BOOLEANO");        
                                                                                                                }
                                                                                                                tp.getProcedimiento(e2.id).tipo=tipoSub.tipoSubBool;
                                                                                                                :}         
    |     FUNC VOID ENCAP:e2 LCLAVE NEWLINE ENTRAB P NEWLINE RetInstr:e3 SURTB RCLAVE NEWLINE SUBP         {:  RESULT = new SymbolSubP();   
                                                                                                                   tp.getProcedimiento(e2.id).tipo=tipoSub.tipoSubVoid;
                                                                                                              :}
    |                                                                                                     {: RESULT = new SymbolSubP();                                                    :}
     ;

ENTRAB ::= {: TS.entrabloc(); RESULT = new SymbolENTRAB(); nivel++; :}
     ;

MAINSKIP ::= {: c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta))); RESULT = new SymbolMAINSKIP(); :}
     ;

SURTB ::= {: TS.surtbloc(); RESULT = new SymbolSURTB(); nivel--; :}
     ;

P     ::= instr:e1                                                              {: RESULT = new SymbolP(); :}
    |     P NEWLINE instr:e1                                                    {: RESULT = new SymbolP(); :}
    |                                                                           {: RESULT = new SymbolP(); :}
    ;

instr ::= CND                                                                   {: RESULT = new Symbolinstr(); :}
    |     ELp:e1                                                                {: RESULT = new Symbolinstr(e1); :} 
    |     M:e1                                                                  {: RESULT = new Symbolinstr(); 
                                                                                //TS.entrabloc();
                                                                                :}
    |     SENTS:e1                                                              {: RESULT = new Symbolinstr(e1); :}
    |     EB:e1                                                                 {: :}
     |     ID:e3 IGUAL CRIDAS:e1                                                 {:
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e1.id, TiposOperandoC3A.procedure),new OperandoC3A(e3, TiposOperandoC3A.variable)));
                                                                                :}
    |     CRIDAS:e1                                                             {: :}
    |     NULL PNTCM                                                            {: :}
    |     LECT LPAREN ID:e1 RPAREN PNTCM                                        {:
                                                                                int idx = tv.getIdVariable(e1);
                                                                                variable v=tv.get(idx);
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                desti = new OperandoC3A("escriure",TiposOperandoC3A.procedure);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,desti));
                                                                                :}
    |     SORT LPAREN SortTec:e1 PNTCM                                          {: :}
     ;

CRIDAS   ::= ID:e1 LPAREN PARAM:e2 RPAREN PNTCM                                 {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE");
                                                                                                                
                                                                                }else if(d1.tipoDesc!=tipoDescripcion.Proc){
                                                                                //System.out.println("ERROR: El subprograma -"+e1+"- no existe");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": ERROR: El subprograma -"+e1+"- no existe";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": ERROR: El subprograma -"+e1+"- no existe");

                                                                                }else if(e2 == null && (d1.cantParamBool != 0 || d1.cantParamInt != 0)){
                                                                                //System.out.println("El subprograma "+e1+" TIENE PARAMETROS DISTINTOS");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- TIENE PARAMETROS DISTINTOS";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- TIENE PARAMETROS DISTINTOS");

                                                                                }else if(e2 == null && (d1.cantParamBool == 0 && d1.cantParamBool == 0)){
                                                                                //System.out.println("El subprograma "+e1+" ESTA PERFECTO (CASO SIN ARGUMENTOS)");
                                                                                e.addEtiqueta(e1);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(d1.etP.etiqueta, TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1,TiposOperandoC3A.etiqueta)));
                                                                                }else if(e2.nParamBool != d1.cantParamBool || e2.nParamInt != d1.cantParamInt){
                                                                                System.out.println("El subprograma "+e1+" TIENE PARAMETROS DISTINTOS");
                                                                                }else{
                                                                                int i;
                                                                                for(i = 0; i < d1.tArg.size(); i++){
                                                                                if(e2.tPar.get(i).tSub != d1.tArg.get(i).tSub){
                                                                                break;
                                                                                }
                                                                                }
                                                                                e.addEtiqueta(e1);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,new OperandoC3A(e1, TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                RESULT = new SymbolCRIDAS(e1);  
                                                                                :}
     ;

PARAM    ::= PARAM:e2 COMA ID:e1                                                {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 != null){    
                                                                                if(d1.tipoS==tipoSub.tipoSubBool){
                                                                                e2.nParamBool++;
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubBool,tp.getNP()),e2.tPar);
                                                                                }
                                                                                if(d1.tipoS==tipoSub.tipoSubInt){
                                                                                e2.nParamInt++;
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubInt,tp.getNP()),e2.tPar);
                                                                                }
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                }else{
                                                                                //ESTO DEBERIA DE FINALIZAR LA EJECUCION DEL PROGRAMA PERO AUN NO TENEMOS
                                                                                //ESO DISPONIBLE ASI QUE EL PROGRAMA SIGUE EJECUTANDOSE
                                                                                e2.nParamInt = 1000; //PONGO ESTO PORQUE ASI ME ASEGURO QUE SALTA EL SIGUIENTE ERROR 
                                                                                System.out.println("El parametro "+e1+" no ha sido declarado previamente");
                                                                                }
                                                                                
                                                                                :}
    |        ID:e1                                                              {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1.tipoS==tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubBool,tp.getNP()));
                                                                                }
                                                                                if(d1.tipoS==tipoSub.tipoSubInt){
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubInt,tp.getNP()));
                                                                                }
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                :}
    |                                                                           {:
                                                                                RESULT = new SymbolPARAM(); 
                                                                                :}
     ;

M        ::= CM:e1 P:e2 NEWLINE RCLAVE SURTB                                    {: RESULT = new SymbolM(); 
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(e1.ei.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1.efi.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                :}
    | error PNTCM                                                               
     ;

CM       ::= Mm:e2 EL:e1 RPAREN LCLAVE NEWLINE                                  {:
                                                                                String efi = e.novaET();   
                                                                                if(e1.isLiteral1){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                }else{
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.variable),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                }
                                                                                
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e2.ei);
                                                                                :}

    |       Mm:e2 VBOOL:e1 RPAREN LCLAVE NEWLINE                                {:
                                                                                String efi = e.novaET();
                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1),TiposOperandoC3A.variable),  //----------------
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e2.ei);
                                                                                :}
    |         Mm:e1 AO:e2 RPAREN LCLAVE NEWLINE                                 {:
                                                                                String efi = e.novaET();                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.variable),  //----------------
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e1.ei);
                                                                                :}
;
Mm       ::=  MENTRES LPAREN                                                    {:
                                                                                String ei = e.novaET();
                                                                                OperandoC3A desti = new OperandoC3A(ei,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                TS.entrabloc();
                                                                                RESULT = new SymbolMm(new Etiqueta(ei));
                                                                                :}
     ;

AO ::= ID:e1 AOp:e3 AO:e2                                                       {: descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String et1 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(et1,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                op1 = new OperandoC3A(String.valueOf(e1),TiposOperandoC3A.enteroLit);                                                                              
                                                                                op2 = new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.enteroLit);     
                                                                                if(e3.and){
                                                                                //AQUI HACEMOS UN AND Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(d1.valorBool&e2.vBool));
                                                                                }else{
                                                                                //AQUI HACEMOS UN OR Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.OR,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(d1.valorBool|e2.vBool));
                                                                                }
                                                                                }
                                                                                //LA MOVIDA AQUI ES, COMO SACO EL VALOR BOOLEANO FINAL DE ESTO
                                                                                //ES DECIR COMO PUEDO SACAR EL VALOR FINAL DE TODA LA EXPRESION BOOLEANA             
                                                                                :}
|       NO ID:e1                                                            {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                
                                                                                OperandoC3A op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,op1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable),new OperandoC3A("neg",TiposOperandoC3A.procedure)));
                                                                                RESULT = new SymbolAO(t);
                                                                                }
                                                                                }
                                                                                 :}
    |       NO ID:e1 AOp:e3 AO:e2                                                     {:descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String et1 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(et1,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,op1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable),new OperandoC3A("neg",TiposOperandoC3A.procedure)));                                                                        
                                                                                op2 = new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.enteroLit);
                                                                                op1= new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable);
                                                                                        int aux;
                                                                                if(d1.valorBool==0){
                                                                                aux=-1;
                                                                                }else{
                                                                                aux=0;
                                                                                }
                                                                                if(e3.and){
                                                                                //AQUI HACEMOS UN AND Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                //c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t);
                                                                                }else{
                                                                                //AQUI HACEMOS UN OR Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.OR,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t);
                                                                                }
                                                                                }:}
 
|       ID:e1                                                                  {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                System.out.println("------");
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                if(d1.valorBool == 0){
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(0,d1,t);
                                                                                }else{
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                //--------------1111
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(-1,d1,t);
                                                                                }}
                                                                                } :}
;

AOp     ::= AND                                                                 {:
                                                                                RESULT = new SymbolAOp(true);
                                                                                :}
    |  OR                                                                       {:
                                                                                RESULT = new SymbolAOp(false);
                                                                                :}
     ;

SortTec  ::= ID:e1 RPAREN                                                       {: 
                                                                                int idx = tv.getIdVariable(e1);
                                                                                variable v=tv.get(idx);
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                if(v.tSub==tipoSub.tipoSubBool){
                                                                                desti = new OperandoC3A("imprimeixBooleano",TiposOperandoC3A.procedure);
                                                                                }else{
                                                                                desti = new OperandoC3A("imprimeix",TiposOperandoC3A.procedure);
                                                                                }

                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,desti));
                                                                                 :}
     ;

ENCAP    ::= ID:e1 LPAREN RPAREN                                                {:
                                                                                //String et = e.novaET();
                                                                                if(np==0){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                np++;
                                                                                descripcion d = new descripcion(tipoDescripcion.Proc, np, false, new Etiqueta(e1));
                                                                                TS.afegir(e1,d);
                                                                                tp.addProcedimiento(new Procedimiento(e1));
                                                                                //TS.entrabloc();รง
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1,TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PMB, null, null, new OperandoC3A(e1, TiposOperandoC3A.procedure)));
                                                                                RESULT = new SymbolENCAP(false,e1); 
                                                                                :}
    |        TE_ARGS1:e1  RPAREN                                                {:
                                                                                String et = e.novaET();
                                                                                if(np==0){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                //TS.entrabloc();
                                                                                np++;
                                                                                descripcion d = new descripcion(tipoDescripcion.Proc, np, false, new Etiqueta(e1.id),e1.tArg);
                                                                                TS.afegir(e1.id,d);
                                                                                tp.addProcedimiento(new Procedimiento(e1.id,e1.tArg));
                                                                                //TS.entrabloc();ร ง
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1.id,TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PMB, null, null, new OperandoC3A(e1.id, TiposOperandoC3A.procedure)));
                                                                                RESULT = new SymbolENCAP(true, e1.id);  
                                                                                :}
     ;

TE_ARGS1 ::= ID:e1 LPAREN ENTER ID:e2                                           {:                                                                                                                                                                
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubInt);   
                                                                                TS.afegir(e2,arg);
                                                                                variable v=new variable(e2,tipoSub.tipoSubInt,tp.getNP());
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubInt, tp.getNP()));
                                                                                RESULT = new SymbolTE_ARGS1(e1,v);
                                                                                }
                                                                                :}
    |        TE_ARGS1:e1 COMA ENTER ID:e2                                       {:
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubInt);
                                                                                //TS.posaArgs(e1.id, e2, arg);
                                                                                TS.afegir(e2,arg);
                                                                                descripcion d = TS.consultarD(e1.id);
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubInt, tp.getNP()));
                                                                                variable v=new variable(e2,tipoSub.tipoSubInt,tp.getNP());
                                                                                RESULT = new SymbolTE_ARGS1(e1.id,v,e1.tArg);
                                                                               
                                                                                } :}
    |        ID:e1 LPAREN BOOL ID:e2                                            {:                                                                                
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubBool);
                                                                                TS.afegir(e2,arg);
                                                                                variable v=new variable(e2,tipoSub.tipoSubBool,tp.getNP());
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubBool, tp.getNP()));
                                                                                RESULT = new SymbolTE_ARGS1(e1,v);
                                                                                }
                                                                                :}
    |        TE_ARGS1:e1 COMA BOOL ID:e2                                        {:
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubBool);
                                                                                //TS.posaArgs(e1.id, e2, arg);
                                                                                TS.afegir(e2,arg);
                                                                                descripcion d = TS.consultarD(e1.id);
                                                                                variable v=new variable(e2,tipoSub.tipoSubBool,tp.getNP());
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubBool, tp.getNP()));
                                                                                RESULT = new SymbolTE_ARGS1(e1.id,v,e1.tArg);
                                                                                }
                                                                                :}
     ;


CND   ::= SCND:e1 P:e2 NEWLINE RCLAVE                                           {:
                                                                                String e = e1.getEtiqueta().getEtiqueta();
                                                                                OperandoC3A desti = new OperandoC3A(e,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                :}
    |     CCND:e1 P:e2 NEWLINE RCLAVE                                           {:
                                                                                OperandoC3A desti = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                :}
     ;

SCND   ::= COND LPAREN EL:e1 RPAREN LCLAVE NEWLINE                              {:
                                                                                String et = e.novaET();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta), true));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e); 
                                                                                :}
    |      COND LPAREN AO:e1 RPAREN LCLAVE NEWLINE                              {:
                                                                                String et = e.novaET();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta), true));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e);
                                                                                :}
     ;

CCND   ::= SCND:e1 P:e2 NEWLINE RCLAVE ECOND LCLAVE NEWLINE                     {:
                                                                                String efi = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(efi,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                RESULT = new SymbolCCND(new Etiqueta(efi)); 
                                                                                :}
     ;

EL    ::= ELp:e3 MENOR ELp:e4                                                   {:
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENOR, e3, e4);
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                //CREAMOS LOS DOS OPERANDOS CON LAS POSIBLES ETIQUETAS
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                //if e3 ® e4 goto desti1 (PREGUNTAR SI ESTA BIEN PLANTEADO, TENGO DUDAS DE SI NOS FALTA EL GOTO AHI)
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LT,op1,op2,desti1));
                                                                                //t = 0
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //goto desti2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                //skip e1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                //t = -1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //skip e2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                :}
    |     ELp:e3 MAYOR ELp:e4                                                   {:
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYOR, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                 System.out.println("-------------------------------------------------------------------------------------0"+tv.obtenUltimaVariable().idVariable);
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);                                                        
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);                                                                                 
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.IFGT,op1,op2,desti1));
                                                                                
                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));//---------------------------------------------------------------------------------------------------------------------------------------
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                :}
    |     ELp:e3 IGUAL IGUAL ELp:e4                                             {:
                                                                                SymbolEL EL = new SymbolEL(ParserSym.IGUAL, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                :}
    |     ELp:e3 MAYIG ELp:e4                                                   {:
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                :}
    |     ELp:e3 MENIG ELp:e4                                                   {:
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                :}

     ;

SENTS ::= ENTER ID:e1 IGUAL ELp:e5 ADD ELp:e6 PNTCM                             {: RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                 :}
    |   ENTER  ID:e1 IGUAL ELp:e5 MUL ELp:e6  PNTCM                                       {: RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                :}
    |   ENTER  ID:e1 IGUAL ELp:e5 DIV ELp:e6  PNTCM                                       {: RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                 :}
    |   ENTER  ID:e1 IGUAL ELp:e5 MOD ELp:e6  PNTCM                                       {: RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                 :}
    |   ENTER  ID:e1 IGUAL ELp:e5 SUB ELp:e6 PNTCM                                        {: RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                 :}
    |   ID:e1 IGUAL ELp:e5 ADD ELp:e6 PNTCM                                     {:
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                }
                                                                                :}
    |   ID:e1 IGUAL ELp:e5 MUL ELp:e6  PNTCM                                    {: 
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                }
                                                                                :}
    |   ID:e1 IGUAL ELp:e5 DIV ELp:e6  PNTCM                                    {: 
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                }
                                                                                :}
    |   ID:e1 IGUAL ELp:e5 MOD ELp:e6  PNTCM                                    {: 
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                }
                                                                                :}
    |   ID:e1 IGUAL ELp:e5 SUB ELp:e6 PNTCM                                     {:
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                }
                                                                                :}                                                                            
     ;

ELp   ::= numero:v                                                              {: 
                                                                                RESULT = new SymbolELp(Integer.parseInt(v), true);
                                                                                //tengo que revisar como lo hacemos con los literales
                                                                                :}
    | ENTER ID:e1 IGUAL numero:v PNTCM                                          {: 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);                                                                                   
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(v,TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
                                                                                :}
    | ENTER ID:e1 IGUAL SUB numero:v PNTCM                                      {: 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                String s = "-"+v;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(s,TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                :}
                                                                            
    | SUB numero:v                                                              {: 
                                                                                String s = "-"+v;
                                                                                RESULT = new SymbolELp(Integer.parseInt(s), true);
                                                                                :}                                                                            


    | ENTER ID:e1 IGUAL ID:e2 PNTCM                                             {: 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                //generar codigo error 68k
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e2+"- no ha sido declarada previamente";                                                                                
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+"  La variable -"+e2+"- no ha sido declarada previamente");                                                                                
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){      
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ");
                                                                                }
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                :}


    | ENTER ID:e1 PNTCM                                                         {:
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                :}
    | ID:e1                                                                     {: 
                                                                                int id = tv.getIdVariable(e1);
                                                                                if(id == -1){    
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                RESULT = new SymbolELp(e1);
                                                                                }
                                                                                :}
    | CONST ID:e1 IGUAL VBOOL:v PNTCM                                           {:
                                                                                variable v1=new variable(e1,tipoSub.tipoSubBool, tp.getNP());
                                                                                v1.constante=true;
                                                                                //tv.addVariable(v1);
                                                                                descripcion d;
                                                                                if("cert".equals(v)){
                                                                                d = new descripcion(tipoDescripcion.Constant, tipoSub.tipoSubBool,-1);
                                                                                v1.valor=-1;
                                                                                }else{        
                                                                                d = new descripcion(tipoDescripcion.Constant, tipoSub.tipoSubBool,0);
                                                                                v1.valor=0;
                                                                                }
                                                                                tv.addVariable(v1);
                                                                                TS.afegir(e1,d);
                                                                               :}
                                                                                
    | CONST ID:e1 IGUAL numero:v PNTCM                                          {:descripcion d = new descripcion(tipoDescripcion.Constant, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);                                                                                   
                                                                                variable v1=new variable(e1,tipoSub.tipoSubBool, tp.getNP());
                                                                                v1.constante=true;
                                                                                v1.valor=Integer.parseInt(v);
                                                                                tv.addVariable(v1);
                                                                                :}
    | ENTER ID:e1 IGUAL CRIDAS:e2                                               {: :}    
     ;

EB   ::= BOOL ID:e1 IGUAL VBOOL:e2 PNTCM                                        {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 != null){
                                                                                System.out.println("ERROR: La variable "+e1+" ya ha sido declarada previamente");
                                                                                er.causaError= "ERROR: La variable "+e1+" ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR: La variable -"+e1+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                tv.addVariable(new variable(e1,tipoSub.tipoSubBool, tp.getNP()));
                                                                                descripcion d;
                                                                                if("cert".equals(e2)){
                                                                                d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool,-1);
                                                                                }else{        
                                                                                d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool,0);
                                                                                }
                                                                                TS.afegir(e1,d);
                                                                                if("fals".equals(e2)){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable),true));
                                                                                }
                                                                                if("cert".equals(e2)){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable),true));
                                                                                }
                                                                                } 
                                                                                :}
   |    BOOL ID:e1 PNTCM                                                        {: 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);  
                                                                                :}
|    ID:e1 IGUAL VBOOL:e2 PNTCM                                                 {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                               // System.out.println("ERROR: La variable -"+e1+"- no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                //System.out.println("ERROR: la variable debe de ser booleana");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"-  debe de ser booleana";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"-  debe de ser booleana");
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }
                                                                                if(e2.equals("cert")){
                                                                                d1.valorBool = -1;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }else{        
                                                                                d1.valorBool = 0;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }
                                                                                } 
                                                                                }
                                                                                :}
    |    ID:e1 IGUAL EL:e2 PNTCM                                                {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                //System.out.println("ERROR: La variable debe de ser booleana");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- debe de ser booleana";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- debe de ser booleana");
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+"  La variable -"+e2+"- no ha sido declarada previamente");
                                                                                }
                                                                                }}
                                                                                :}
    |    BOOL ID:e1 IGUAL EL:e2 PNTCM                                           {:
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);
                                                                                 :}
    |    ID:e1 IGUAL numero:v PNTCM                                             {:
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");

                                                                                }else if(d1.tipoS!=tipoSub.tipoSubInt){
                                                                                //System.out.println("ERROR: la variable debe de ser un ENTERO");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- la variable debe de ser un ENTERO";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- la variable debe de ser un ENTERO");
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                int id = tv.getIdVariable(e1);
                                                                                variable v1 = tv.get(id);
                                                                                OperandoC3A op2 = new OperandoC3A(v,TiposOperandoC3A.enteroLit);
                                                                                OperandoC3A desti = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op2,desti));
                                                                                }
                                                                                }:}
    |    ID:e1 IGUAL ID:e2 PNTCM                                                {: descripcion d1 = TS.consultarD(e1);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                 if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d2 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS != d2.tipoS){
                                                                                System.out.println("ERROR NO COINCIDEN LOS TIPOS");
                                                                                report_error("No coinciden los tipos \""+e2+"\"", new SymbolEB());
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable))); 
                                                                                 :}
    |    BOOL ID:e1 IGUAL CRIDAS:e2 

    |   BOOL ID:e1 IGUAL ID:e2 PNTCM                                             {: 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                //generar codigo error 68k
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));

                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- no ha sido declarada previamente");                                                                                
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){  
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));

                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ");
                                                                                }
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolEB();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                :}
    ;
RetInstr ::= RETORNA ID:e1 PNTCM                                                {: descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable "+e1+" no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                RESULT = new SymbolRetInstr();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable "+e1+" no ha sido declarada previamente");
                                                                                
                                                                                }else{
                                                                                if(d1.tipoS == tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolRetInstr(true);
                                                                                }else{
                                                                                RESULT = new SymbolRetInstr(false);
                                                                                }
                                                                                //Procedimiento p = tp.tablaP.get(tp.getNP());
                                                                                //c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(p.idProcedimiTiposInstruccionC3A.RTN,null,null,new OperandoC3A(e1, TiposOperandoC3A.etiqueta)));ento, TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.RTN,null,null,new OperandoC3A(e1, TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                
                                                                                :}
               | RETORNA numero PNTCM                                           {: RESULT = new SymbolRetInstr(false); :}
            | RETORNA VBOOL PNTCM                                               {: RESULT = new SymbolRetInstr(true); :}
            |                                                                   {:
                                                                                RESULT = new SymbolRetInstr(false);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.RTN,null,null,null));:}
             ;
