
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactic;

import java_cup.runtime.*;
import compilador.sintactic.symbols.*;
import codiEnsamblador.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\014\000\002\016" +
    "\020\000\002\016\020\000\002\016\017\000\002\016\002" +
    "\000\002\026\002\000\002\032\002\000\002\027\002\000" +
    "\002\003\003\000\002\003\005\000\002\003\002\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\005\000\002\004\003" +
    "\000\002\004\004\000\002\004\007\000\002\004\006\000" +
    "\002\030\007\000\002\031\005\000\002\031\003\000\002" +
    "\031\002\000\002\020\007\000\002\020\004\000\002\021" +
    "\007\000\002\021\007\000\002\021\007\000\002\022\004" +
    "\000\002\024\005\000\002\024\004\000\002\024\006\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\017\004\000\002\014\005\000\002\014\004\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\005\006\000\002\005\006\000\002\006\010\000" +
    "\002\006\010\000\002\007\011\000\002\010\005\000\002" +
    "\010\005\000\002\010\006\000\002\010\005\000\002\010" +
    "\005\000\002\012\011\000\002\012\011\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\012\010\000" +
    "\002\012\010\000\002\012\010\000\002\012\010\000\002" +
    "\012\010\000\002\011\003\000\002\011\007\000\002\011" +
    "\010\000\002\011\004\000\002\011\007\000\002\011\005" +
    "\000\002\011\003\000\002\011\007\000\002\011\007\000" +
    "\002\011\006\000\002\013\007\000\002\013\005\000\002" +
    "\013\006\000\002\013\006\000\002\013\007\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\007" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\023\ufffc\044\004\001\002\000\010\015" +
    "\304\031\302\040\303\001\002\000\004\023\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\007\011\001\002\000\004\010\012\001\002\000\004" +
    "\014\013\001\002\000\004\022\014\001\002\000\034\003" +
    "\ufffa\004\ufffa\006\ufffa\015\ufffa\022\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\034\ufffa\035\ufffa\036\ufffa\045\ufffa\046\ufffa\001" +
    "\002\000\034\003\036\004\040\006\030\015\027\022\ufff6" +
    "\030\034\031\041\032\037\034\044\035\032\036\022\045" +
    "\023\046\026\001\002\000\004\022\ufff1\001\002\000\034" +
    "\003\036\004\040\006\030\015\027\022\ufff6\030\034\031" +
    "\041\032\037\034\044\035\032\036\022\045\023\046\026" +
    "\001\002\000\034\003\036\004\040\006\030\015\027\022" +
    "\ufff6\030\034\031\041\032\037\034\044\035\032\036\022" +
    "\045\023\046\026\001\002\000\004\022\ufff5\001\002\000" +
    "\004\007\266\001\002\000\022\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\022\uffc0\024\uffc0\025\uffc0\027\uffc0\001\002\000" +
    "\004\022\264\001\002\000\004\022\ufff3\001\002\000\010" +
    "\007\125\013\232\022\uffba\001\002\000\004\046\204\001" +
    "\002\000\004\045\203\001\002\000\004\022\ufff2\001\002" +
    "\000\004\007\177\001\002\000\034\003\036\004\040\006" +
    "\030\015\027\022\ufff6\030\034\031\041\032\037\034\044" +
    "\035\032\036\022\045\023\046\026\001\002\000\004\007" +
    "\167\001\002\000\004\022\ufff4\001\002\000\004\027\166" +
    "\001\002\000\004\046\160\001\002\000\004\007\147\001" +
    "\002\000\004\046\135\001\002\000\004\022\ufff8\001\002" +
    "\000\020\006\030\015\047\032\037\037\050\045\023\046" +
    "\051\047\052\001\002\000\004\027\046\001\002\000\004" +
    "\022\uffef\001\002\000\004\022\uffee\001\002\000\004\046" +
    "\113\001\002\000\004\046\110\001\002\000\022\010\uffde" +
    "\011\uffba\012\uffba\013\uffba\024\uffba\025\uffba\042\103\043" +
    "\105\001\002\000\004\010\100\001\002\000\004\010\075" +
    "\001\002\000\014\011\063\012\065\013\061\024\064\025" +
    "\062\001\002\000\004\010\056\001\002\000\004\014\057" +
    "\001\002\000\004\022\060\001\002\000\034\003\uffe3\004" +
    "\uffe3\006\uffe3\015\uffe3\022\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\045\uffe3\046\uffe3\001\002\000" +
    "\004\013\073\001\002\000\014\006\030\015\047\032\037" +
    "\045\023\046\066\001\002\000\014\006\030\015\047\032" +
    "\037\045\023\046\066\001\002\000\014\006\030\015\047" +
    "\032\037\045\023\046\066\001\002\000\014\006\030\015" +
    "\047\032\037\045\023\046\066\001\002\000\006\010\uffba" +
    "\027\uffba\001\002\000\006\010\uffce\027\uffce\001\002\000" +
    "\006\010\uffcc\027\uffcc\001\002\000\006\010\uffcf\027\uffcf" +
    "\001\002\000\006\010\uffcb\027\uffcb\001\002\000\014\006" +
    "\030\015\047\032\037\045\023\046\066\001\002\000\006" +
    "\010\uffcd\027\uffcd\001\002\000\004\014\076\001\002\000" +
    "\004\022\077\001\002\000\034\003\uffe5\004\uffe5\006\uffe5" +
    "\015\uffe5\022\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\045\uffe5\046\uffe5\001\002\000\004\014\101" +
    "\001\002\000\004\022\102\001\002\000\034\003\uffe4\004" +
    "\uffe4\006\uffe4\015\uffe4\022\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\045\uffe4\046\uffe4\001\002\000" +
    "\006\037\uffdd\046\uffdd\001\002\000\006\037\050\046\106" +
    "\001\002\000\006\037\uffdc\046\uffdc\001\002\000\010\010" +
    "\uffde\042\103\043\105\001\002\000\004\010\uffe1\001\002" +
    "\000\010\010\uffe0\042\103\043\105\001\002\000\006\037" +
    "\050\046\106\001\002\000\004\010\uffdf\001\002\000\006" +
    "\013\114\027\115\001\002\000\010\006\121\045\117\046" +
    "\116\001\002\000\034\005\uffbb\006\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024" +
    "\uffbb\025\uffbb\027\uffbb\001\002\000\006\007\125\027\126" +
    "\001\002\000\004\027\124\001\002\000\034\005\uffb7\006" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\024\uffb7\025\uffb7\027\uffb7\001\002\000" +
    "\004\045\122\001\002\000\004\027\123\001\002\000\034" +
    "\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\027\uffbe" +
    "\001\002\000\034\005\uffbf\006\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\025\uffbf\027\uffbf\001\002\000\010\010\uffe8\033\uffe8\046" +
    "\127\001\002\000\034\005\uffbc\006\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024" +
    "\uffbc\025\uffbc\027\uffbc\001\002\000\006\010\uffe9\033\uffe9" +
    "\001\002\000\006\010\132\033\131\001\002\000\004\046" +
    "\134\001\002\000\004\027\133\001\002\000\034\005\uffeb" +
    "\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\027\uffeb\001\002" +
    "\000\006\010\uffea\033\uffea\001\002\000\006\013\136\027" +
    "\137\001\002\000\016\006\030\015\047\032\037\045\023" +
    "\046\140\047\142\001\002\000\004\022\uffb5\001\002\000" +
    "\020\007\125\011\uffba\012\uffba\013\uffba\024\uffba\025\uffba" +
    "\027\146\001\002\000\004\027\145\001\002\000\004\027" +
    "\144\001\002\000\004\022\uffaf\001\002\000\004\022\uffb6" +
    "\001\002\000\004\022\uffb2\001\002\000\004\022\uffae\001" +
    "\002\000\016\006\030\015\047\032\037\037\050\045\023" +
    "\046\051\001\002\000\004\010\155\001\002\000\004\010" +
    "\152\001\002\000\004\014\153\001\002\000\004\022\154" +
    "\001\002\000\034\003\uffd1\004\uffd1\006\uffd1\015\uffd1\022" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\045\uffd1\046\uffd1\001\002\000\004\014\156\001\002\000" +
    "\004\022\157\001\002\000\034\003\uffd2\004\uffd2\006\uffd2" +
    "\015\uffd2\022\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\045\uffd2\046\uffd2\001\002\000\004\013\161" +
    "\001\002\000\006\045\162\047\163\001\002\000\004\027" +
    "\165\001\002\000\004\027\164\001\002\000\034\005\uffb9" +
    "\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\027\uffb9\001\002" +
    "\000\034\005\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\001\002\000\004\022\uffe6\001\002\000\020\006" +
    "\uffe2\015\uffe2\032\uffe2\037\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\001\002\000\004\022\171\001\002\000\034\003\036\004" +
    "\040\006\030\015\027\016\172\030\034\031\041\032\037" +
    "\034\044\035\032\036\022\045\023\046\026\001\002\000" +
    "\006\022\uffd4\026\174\001\002\000\004\022\ufff7\001\002" +
    "\000\004\014\175\001\002\000\004\022\176\001\002\000" +
    "\034\003\uffd0\004\uffd0\006\uffd0\015\uffd0\022\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\034\uffd0\035\uffd0\036\uffd0\045\uffd0\046" +
    "\uffd0\001\002\000\004\046\200\001\002\000\004\010\201" +
    "\001\002\000\004\027\202\001\002\000\004\022\uffed\001" +
    "\002\000\034\005\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025" +
    "\uffbd\027\uffbd\001\002\000\006\013\205\027\115\001\002" +
    "\000\014\006\210\015\047\032\037\045\207\046\206\001" +
    "\002\000\020\005\uffba\006\uffba\007\125\017\uffba\020\uffba" +
    "\021\uffba\027\126\001\002\000\016\005\uffc0\006\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\027\124\001\002\000\004\045\231" +
    "\001\002\000\014\005\214\006\213\017\216\020\215\021" +
    "\212\001\002\000\014\006\030\015\047\032\037\045\023" +
    "\046\066\001\002\000\014\006\030\015\047\032\037\045" +
    "\023\046\066\001\002\000\014\006\030\015\047\032\037" +
    "\045\023\046\066\001\002\000\014\006\030\015\047\032" +
    "\037\045\023\046\066\001\002\000\014\006\030\015\047" +
    "\032\037\045\023\046\066\001\002\000\004\027\220\001" +
    "\002\000\004\022\uffc8\001\002\000\004\027\222\001\002" +
    "\000\004\022\uffc9\001\002\000\004\027\224\001\002\000" +
    "\004\022\uffca\001\002\000\004\027\226\001\002\000\004" +
    "\022\uffc6\001\002\000\004\027\230\001\002\000\004\022" +
    "\uffc7\001\002\000\016\005\uffbd\006\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\027\123\001\002\000\016\006\030\015\047\032" +
    "\037\045\233\046\234\047\235\001\002\000\030\005\uffc0" +
    "\006\uffc0\011\uffc0\012\uffc0\013\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\024\uffc0\025\uffc0\027\263\001\002\000\032\005\uffba" +
    "\006\uffba\007\125\011\uffba\012\uffba\013\uffba\017\uffba\020" +
    "\uffba\021\uffba\024\uffba\025\uffba\027\262\001\002\000\004" +
    "\027\261\001\002\000\004\027\260\001\002\000\026\005" +
    "\242\006\243\011\063\012\065\013\061\017\244\020\245" +
    "\021\241\024\064\025\062\001\002\000\004\022\ufff0\001" +
    "\002\000\014\006\030\015\047\032\037\045\023\046\066" +
    "\001\002\000\014\006\030\015\047\032\037\045\023\046" +
    "\066\001\002\000\014\006\030\015\047\032\037\045\023" +
    "\046\066\001\002\000\014\006\030\015\047\032\037\045" +
    "\023\046\066\001\002\000\014\006\030\015\047\032\037" +
    "\045\023\046\066\001\002\000\004\027\247\001\002\000" +
    "\004\022\uffc4\001\002\000\004\027\251\001\002\000\004" +
    "\022\uffc3\001\002\000\004\027\253\001\002\000\004\022" +
    "\uffc1\001\002\000\004\027\255\001\002\000\004\022\uffc5" +
    "\001\002\000\004\027\257\001\002\000\004\022\uffc2\001" +
    "\002\000\004\022\uffb3\001\002\000\004\022\uffb4\001\002" +
    "\000\004\022\uffb0\001\002\000\004\022\uffb1\001\002\000" +
    "\034\003\036\004\040\006\030\015\027\016\265\030\034" +
    "\031\041\032\037\034\044\035\032\036\022\045\023\046" +
    "\026\001\002\000\004\002\000\001\002\000\004\046\267" +
    "\001\002\000\004\010\272\001\002\000\004\027\271\001" +
    "\002\000\004\022\uffec\001\002\000\004\027\uffdb\001\002" +
    "\000\004\022\274\001\002\000\034\003\036\004\040\006" +
    "\030\015\027\016\275\030\034\031\041\032\037\034\044" +
    "\035\032\036\022\045\023\046\026\001\002\000\004\022" +
    "\ufff9\001\002\000\004\022\uffe7\001\002\000\004\022\300" +
    "\001\002\000\034\003\036\004\040\006\030\015\027\016" +
    "\301\030\034\031\041\032\037\034\044\035\032\036\022" +
    "\045\023\046\026\001\002\000\004\022\uffd3\001\002\000" +
    "\004\046\ufffb\001\002\000\004\046\306\001\002\000\004" +
    "\046\ufffb\001\002\000\004\046\306\001\002\000\004\007" +
    "\340\001\002\000\006\010\333\033\332\001\002\000\004" +
    "\014\311\001\002\000\004\022\312\001\002\000\034\003" +
    "\036\004\040\006\030\015\027\022\ufff6\030\034\031\041" +
    "\032\037\034\044\035\032\036\022\045\023\046\026\001" +
    "\002\000\004\022\314\001\002\000\036\003\036\004\040" +
    "\006\030\015\027\022\uffaa\030\034\031\041\032\037\034" +
    "\044\035\032\036\022\041\315\045\023\046\026\001\002" +
    "\000\010\045\325\046\324\047\326\001\002\000\004\022" +
    "\ufff9\001\002\000\004\022\320\001\002\000\004\016\321" +
    "\001\002\000\004\022\322\001\002\000\006\023\ufffc\044" +
    "\004\001\002\000\004\023\uffff\001\002\000\004\027\331" +
    "\001\002\000\004\027\330\001\002\000\004\027\327\001" +
    "\002\000\006\016\uffab\022\uffab\001\002\000\006\016\uffac" +
    "\022\uffac\001\002\000\006\016\uffad\022\uffad\001\002\000" +
    "\006\015\335\031\334\001\002\000\004\014\uffd9\001\002" +
    "\000\004\046\337\001\002\000\004\046\336\001\002\000" +
    "\006\010\uffd7\033\uffd7\001\002\000\006\010\uffd5\033\uffd5" +
    "\001\002\000\010\010\341\015\343\031\342\001\002\000" +
    "\004\014\uffda\001\002\000\004\046\345\001\002\000\004" +
    "\046\344\001\002\000\006\010\uffd8\033\uffd8\001\002\000" +
    "\006\010\uffd6\033\uffd6\001\002\000\004\014\347\001\002" +
    "\000\004\022\350\001\002\000\034\003\ufffb\004\ufffb\006" +
    "\ufffb\015\ufffb\022\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\045\ufffb\046\ufffb\001\002\000\034\003" +
    "\036\004\040\006\030\015\027\022\ufff6\030\034\031\041" +
    "\032\037\034\044\035\032\036\022\045\023\046\026\001" +
    "\002\000\004\022\353\001\002\000\036\003\036\004\040" +
    "\006\030\015\027\016\uffaa\030\034\031\041\032\037\034" +
    "\044\035\032\036\022\041\315\045\023\046\026\001\002" +
    "\000\004\016\ufff9\001\002\000\004\016\356\001\002\000" +
    "\004\022\357\001\002\000\006\023\ufffc\044\004\001\002" +
    "\000\004\023\ufffd\001\002\000\004\046\306\001\002\000" +
    "\004\014\363\001\002\000\004\022\364\001\002\000\034" +
    "\003\036\004\040\006\030\015\027\022\ufff6\030\034\031" +
    "\041\032\037\034\044\035\032\036\022\045\023\046\026" +
    "\001\002\000\004\022\366\001\002\000\036\003\036\004" +
    "\040\006\030\015\027\022\uffaa\030\034\031\041\032\037" +
    "\034\044\035\032\036\022\041\315\045\023\046\026\001" +
    "\002\000\004\022\ufff9\001\002\000\004\022\371\001\002" +
    "\000\004\016\372\001\002\000\004\022\373\001\002\000" +
    "\006\023\ufffc\044\004\001\002\000\004\023\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\002\005\016\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\014\001\001\000\032\003\023" +
    "\004\041\005\020\006\032\007\016\011\034\012\030\013" +
    "\015\020\024\021\017\022\042\030\044\001\001\000\002" +
    "\001\001\000\032\003\276\004\041\005\020\006\032\007" +
    "\016\011\034\012\030\013\015\020\024\021\017\022\042" +
    "\030\044\001\001\000\032\003\272\004\041\005\020\006" +
    "\032\007\016\011\034\012\030\013\015\020\024\021\017" +
    "\022\042\030\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\167\004\041" +
    "\005\020\006\032\007\016\011\034\012\030\013\015\020" +
    "\024\021\017\022\042\030\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\052\011\053\024\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\071\001\001\000\004\011\070\001\001" +
    "\000\004\011\067\001\001\000\004\011\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\106\001\001\000\002" +
    "\001\001\000\004\025\103\001\001\000\002\001\001\000" +
    "\004\025\110\001\001\000\004\024\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\140\011\053\030\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\147\011\053" +
    "\024\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\172\005\020" +
    "\006\032\007\016\011\034\012\030\013\015\020\024\021" +
    "\017\022\042\030\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\210\030\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\226\001\001\000\004\011\224\001\001\000\004\011\222" +
    "\001\001\000\004\011\220\001\001\000\004\011\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\235\011\236\030" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\255\001\001\000\004\011\253\001\001" +
    "\000\004\011\251\001\001\000\004\011\247\001\001\000" +
    "\004\011\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\172" +
    "\005\020\006\032\007\016\011\034\012\030\013\015\020" +
    "\024\021\017\022\042\030\044\001\001\000\002\001\001" +
    "\000\004\017\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\172\005\020\006\032\007\016\011\034\012" +
    "\030\013\015\020\024\021\017\022\042\030\044\001\001" +
    "\000\004\027\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\172\005\020\006\032\007\016\011\034" +
    "\012\030\013\015\020\024\021\017\022\042\030\044\001" +
    "\001\000\002\001\001\000\004\026\360\001\001\000\006" +
    "\014\345\015\306\001\001\000\004\026\304\001\001\000" +
    "\006\014\307\015\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\312\004\041\005\020\006\032\007\016\011\034\012\030" +
    "\013\015\020\024\021\017\022\042\030\044\001\001\000" +
    "\002\001\001\000\032\004\172\005\020\006\032\007\016" +
    "\011\034\012\030\013\015\020\024\021\017\022\042\023" +
    "\315\030\044\001\001\000\002\001\001\000\004\027\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\350\001\001\000\032\003\351\004\041\005" +
    "\020\006\032\007\016\011\034\012\030\013\015\020\024" +
    "\021\017\022\042\030\044\001\001\000\002\001\001\000" +
    "\032\004\172\005\020\006\032\007\016\011\034\012\030" +
    "\013\015\020\024\021\017\022\042\023\353\030\044\001" +
    "\001\000\004\027\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\357\001\001\000\002\001\001\000" +
    "\006\014\361\015\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\364\004\041\005\020\006\032\007" +
    "\016\011\034\012\030\013\015\020\024\021\017\022\042" +
    "\030\044\001\001\000\002\001\001\000\032\004\172\005" +
    "\020\006\032\007\016\011\034\012\030\013\015\020\024" +
    "\021\017\022\042\023\366\030\044\001\001\000\004\027" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\373\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
        Error er=new Error();
        er.causaError=msg.toString();
        GeneraEnsablador e= new GeneraEnsablador(); 
        e.generaError68k();
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 int nv = 0; int np = 0; int nivel = 0; TablaVariables tv = new TablaVariables(); TABLASIMBOLOS TS = new TABLASIMBOLOS(); TablaProcedimientos tp = new TablaProcedimientos(); Codi3A c3a = new Codi3A(); Etiqueta e = new Etiqueta(); 
               Error er=new Error();
    
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolI start_val = (SymbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= SUBP MAIN LPAREN RPAREN LCLAVE NEWLINE MAINSKIP P NEWLINE RCLAVE 
            {
              SymbolI RESULT =null;
		 RESULT = new SymbolI();
                                                                                                                    c3a.imprimeC3A();
                                                                                                                    c3a.generaFicheroC3A();
                                                                                                                    GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                    e.generaCodi68k();                                                                                                                       
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SUBP ::= FUNC ENTER ENTRAB ENCAP LCLAVE NEWLINE P NEWLINE RetInstr SURTB NEWLINE RCLAVE NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymbolENCAP e2 = (SymbolENCAP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 RESULT = new SymbolSubP();
                                                                                                                if(e3.esBool){
                                                                                                                //System.out.println("ERROR: DEBE DEVOLVER ENTERO");
                                                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));                                                                                                                                                                                              
                                                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": DEBE DEVOLVER ENTERO";
                                                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                e.generaError68k();
                                                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": DEBE DEVOLVER ENTERO");
                                                                                                                }
                                                                                                                tp.getProcedimiento(e2.id).tipo=tipoSub.tipoSubInt;
                                                                                                                //TOCA REVISAR ANTES DE HACER                                                                                                                
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SUBP ::= FUNC BOOL ENTRAB ENCAP LCLAVE NEWLINE P NEWLINE RetInstr SURTB NEWLINE RCLAVE NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymbolENCAP e2 = (SymbolENCAP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		         RESULT = new SymbolSubP(); 
                                                                                                                if(!e3.esBool){
                                                                                                                //System.out.println("ERROR: DEBE DEVOLVER BOOLEANO");
                                                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": ERROR: DEBE DEVOLVER BOOLEANO";
                                                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                e.generaError68k();
                                                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": ERROR: DEBE DEVOLVER BOOLEANO");        
                                                                                                                }
                                                                                                                tp.getProcedimiento(e2.id).tipo=tipoSub.tipoSubBool;
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SUBP ::= FUNC VOID ENCAP LCLAVE NEWLINE ENTRAB P NEWLINE RetInstr SURTB RCLAVE NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymbolENCAP e2 = (SymbolENCAP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  RESULT = new SymbolSubP();   
                                                                                                                   tp.getProcedimiento(e2.id).tipo=tipoSub.tipoSubVoid;
                                                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SUBP ::= 
            {
              SymbolSubP RESULT =null;
		 RESULT = new SymbolSubP();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENTRAB ::= 
            {
              SymbolENTRAB RESULT =null;
		 TS.entrabloc(); RESULT = new SymbolENTRAB(); nivel++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRAB",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAINSKIP ::= 
            {
              SymbolMAINSKIP RESULT =null;
		 c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta))); RESULT = new SymbolMAINSKIP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAINSKIP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SURTB ::= 
            {
              SymbolSURTB RESULT =null;
		 TS.surtbloc(); RESULT = new SymbolSURTB(); nivel--; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SURTB",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // P ::= instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // P ::= P NEWLINE instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // P ::= 
            {
              SymbolP RESULT =null;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= CND 
            {
              Symbolinstr RESULT =null;
		 RESULT = new Symbolinstr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= ELp 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e1 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= M 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolM e1 = (SymbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(); 
                                                                                //TS.entrabloc();
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= SENTS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSENTS e1 = (SymbolSENTS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= EB 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolEB e1 = (SymbolEB)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= ID IGUAL CRIDAS 
            {
              Symbolinstr RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCRIDAS e1 = (SymbolCRIDAS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e1.id, TiposOperandoC3A.procedure),new OperandoC3A(e3, TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= CRIDAS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCRIDAS e1 = (SymbolCRIDAS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= NULL PNTCM 
            {
              Symbolinstr RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= LECT LPAREN ID RPAREN PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                int idx = tv.getIdVariable(e1);
                                                                                variable v=tv.get(idx);
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                desti = new OperandoC3A("escriure",TiposOperandoC3A.procedure);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,desti));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instr ::= SORT LPAREN SortTec PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSortTec e1 = (SymbolSortTec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CRIDAS ::= ID LPAREN PARAM RPAREN PNTCM 
            {
              SymbolCRIDAS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolPARAM e2 = (SymbolPARAM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE");
                                                                                                                
                                                                                }else if(d1.tipoDesc!=tipoDescripcion.Proc){
                                                                                //System.out.println("ERROR: El subprograma -"+e1+"- no existe");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": ERROR: El subprograma -"+e1+"- no existe";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": ERROR: El subprograma -"+e1+"- no existe");

                                                                                }else if(e2 == null && (d1.cantParamBool != 0 || d1.cantParamInt != 0)){
                                                                                //System.out.println("El subprograma "+e1+" TIENE PARAMETROS DISTINTOS");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- TIENE PARAMETROS DISTINTOS";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- TIENE PARAMETROS DISTINTOS");

                                                                                }else if(e2 == null && (d1.cantParamBool == 0 && d1.cantParamBool == 0)){
                                                                                //System.out.println("El subprograma "+e1+" ESTA PERFECTO (CASO SIN ARGUMENTOS)");
                                                                                e.addEtiqueta(e1);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(d1.etP.etiqueta, TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1,TiposOperandoC3A.etiqueta)));
                                                                                }else if(e2.nParamBool != d1.cantParamBool || e2.nParamInt != d1.cantParamInt){
                                                                                System.out.println("El subprograma "+e1+" TIENE PARAMETROS DISTINTOS");
                                                                                }else{
                                                                                int i;
                                                                                for(i = 0; i < d1.tArg.size(); i++){
                                                                                if(e2.tPar.get(i).tSub != d1.tArg.get(i).tSub){
                                                                                break;
                                                                                }
                                                                                }
                                                                                e.addEtiqueta(e1);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,new OperandoC3A(e1, TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                RESULT = new SymbolCRIDAS(e1);  
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDAS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAM ::= PARAM COMA ID 
            {
              SymbolPARAM RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolPARAM e2 = (SymbolPARAM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 != null){    
                                                                                if(d1.tipoS==tipoSub.tipoSubBool){
                                                                                e2.nParamBool++;
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubBool,tp.getNP()),e2.tPar);
                                                                                }
                                                                                if(d1.tipoS==tipoSub.tipoSubInt){
                                                                                e2.nParamInt++;
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubInt,tp.getNP()),e2.tPar);
                                                                                }
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                }else{
                                                                                //ESTO DEBERIA DE FINALIZAR LA EJECUCION DEL PROGRAMA PERO AUN NO TENEMOS
                                                                                //ESO DISPONIBLE ASI QUE EL PROGRAMA SIGUE EJECUTANDOSE
                                                                                e2.nParamInt = 1000; //PONGO ESTO PORQUE ASI ME ASEGURO QUE SALTA EL SIGUIENTE ERROR 
                                                                                System.out.println("El parametro "+e1+" no ha sido declarado previamente");
                                                                                }
                                                                                
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAM ::= ID 
            {
              SymbolPARAM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1.tipoS==tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubBool,tp.getNP()));
                                                                                }
                                                                                if(d1.tipoS==tipoSub.tipoSubInt){
                                                                                RESULT = new SymbolPARAM(new variable(e1,tipoSub.tipoSubInt,tp.getNP()));
                                                                                }
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAM ::= 
            {
              SymbolPARAM RESULT =null;
		
                                                                                RESULT = new SymbolPARAM(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // M ::= CM P NEWLINE RCLAVE SURTB 
            {
              SymbolM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolCM e1 = (SymbolCM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SymbolM(); 
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(e1.ei.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1.efi.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // M ::= error PNTCM 
            {
              SymbolM RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CM ::= Mm EL RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e2 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String efi = e.novaET();   
                                                                                if(e1.isLiteral1){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                }else{
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.variable),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                }
                                                                                
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e2.ei);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CM ::= Mm VBOOL RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e2 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String efi = e.novaET();
                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1),TiposOperandoC3A.variable),  //----------------
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e2.ei);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CM ::= Mm AO RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e1 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolAO e2 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String efi = e.novaET();                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.variable),  //----------------
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e1.ei);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Mm ::= MENTRES LPAREN 
            {
              SymbolMm RESULT =null;
		
                                                                                String ei = e.novaET();
                                                                                OperandoC3A desti = new OperandoC3A(ei,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                TS.entrabloc();
                                                                                RESULT = new SymbolMm(new Etiqueta(ei));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mm",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AO ::= ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAOp e3 = (SymbolAOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAO e2 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String et1 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(et1,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                op1 = new OperandoC3A(String.valueOf(e1),TiposOperandoC3A.enteroLit);                                                                              
                                                                                op2 = new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.enteroLit);     
                                                                                if(e3.and){
                                                                                //AQUI HACEMOS UN AND Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(d1.valorBool&e2.vBool));
                                                                                }else{
                                                                                //AQUI HACEMOS UN OR Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.OR,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(d1.valorBool|e2.vBool));
                                                                                }
                                                                                }
                                                                                //LA MOVIDA AQUI ES, COMO SACO EL VALOR BOOLEANO FINAL DE ESTO
                                                                                //ES DECIR COMO PUEDO SACAR EL VALOR FINAL DE TODA LA EXPRESION BOOLEANA             
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AO ::= NO ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                
                                                                                OperandoC3A op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,op1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable),new OperandoC3A("neg",TiposOperandoC3A.procedure)));
                                                                                RESULT = new SymbolAO(t);
                                                                                }
                                                                                }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AO ::= NO ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAOp e3 = (SymbolAOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAO e2 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String et1 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(et1,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,op1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable),new OperandoC3A("neg",TiposOperandoC3A.procedure)));                                                                        
                                                                                op2 = new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.enteroLit);
                                                                                op1= new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable);
                                                                                        int aux;
                                                                                if(d1.valorBool==0){
                                                                                aux=-1;
                                                                                }else{
                                                                                aux=0;
                                                                                }
                                                                                if(e3.and){
                                                                                //AQUI HACEMOS UN AND Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                //c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t);
                                                                                }else{
                                                                                //AQUI HACEMOS UN OR Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.OR,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t);
                                                                                }
                                                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AO ::= ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                System.out.println("------");
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                if(d1.valorBool == 0){
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(0,d1,t);
                                                                                }else{
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                //--------------1111
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(-1,d1,t);
                                                                                }}
                                                                                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AOp ::= AND 
            {
              SymbolAOp RESULT =null;
		
                                                                                RESULT = new SymbolAOp(true);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AOp ::= OR 
            {
              SymbolAOp RESULT =null;
		
                                                                                RESULT = new SymbolAOp(false);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SortTec ::= ID RPAREN 
            {
              SymbolSortTec RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                int idx = tv.getIdVariable(e1);
                                                                                variable v=tv.get(idx);
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                if(v.tSub==tipoSub.tipoSubBool){
                                                                                desti = new OperandoC3A("imprimeixBooleano",TiposOperandoC3A.procedure);
                                                                                }else{
                                                                                desti = new OperandoC3A("imprimeix",TiposOperandoC3A.procedure);
                                                                                }

                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,desti));
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SortTec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENCAP ::= ID LPAREN RPAREN 
            {
              SymbolENCAP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                //String et = e.novaET();
                                                                                if(np==0){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                np++;
                                                                                descripcion d = new descripcion(tipoDescripcion.Proc, np, false, new Etiqueta(e1));
                                                                                TS.afegir(e1,d);
                                                                                tp.addProcedimiento(new Procedimiento(e1));
                                                                                //TS.entrabloc();รง
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1,TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PMB, null, null, new OperandoC3A(e1, TiposOperandoC3A.procedure)));
                                                                                RESULT = new SymbolENCAP(false,e1); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENCAP ::= TE_ARGS1 RPAREN 
            {
              SymbolENCAP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTE_ARGS1 e1 = (SymbolTE_ARGS1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                String et = e.novaET();
                                                                                if(np==0){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                //TS.entrabloc();
                                                                                np++;
                                                                                descripcion d = new descripcion(tipoDescripcion.Proc, np, false, new Etiqueta(e1.id),e1.tArg);
                                                                                TS.afegir(e1.id,d);
                                                                                tp.addProcedimiento(new Procedimiento(e1.id,e1.tArg));
                                                                                //TS.entrabloc();ร ง
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1.id,TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PMB, null, null, new OperandoC3A(e1.id, TiposOperandoC3A.procedure)));
                                                                                RESULT = new SymbolENCAP(true, e1.id);  
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TE_ARGS1 ::= ID LPAREN ENTER ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		                                                                                                                                                                
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubInt);   
                                                                                TS.afegir(e2,arg);
                                                                                variable v=new variable(e2,tipoSub.tipoSubInt,tp.getNP());
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubInt, tp.getNP()));
                                                                                RESULT = new SymbolTE_ARGS1(e1,v);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TE_ARGS1 ::= TE_ARGS1 COMA ENTER ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTE_ARGS1 e1 = (SymbolTE_ARGS1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubInt);
                                                                                //TS.posaArgs(e1.id, e2, arg);
                                                                                TS.afegir(e2,arg);
                                                                                descripcion d = TS.consultarD(e1.id);
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubInt, tp.getNP()));
                                                                                variable v=new variable(e2,tipoSub.tipoSubInt,tp.getNP());
                                                                                RESULT = new SymbolTE_ARGS1(e1.id,v,e1.tArg);
                                                                               
                                                                                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TE_ARGS1 ::= ID LPAREN BOOL ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		                                                                                
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubBool);
                                                                                TS.afegir(e2,arg);
                                                                                variable v=new variable(e2,tipoSub.tipoSubBool,tp.getNP());
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubBool, tp.getNP()));
                                                                                RESULT = new SymbolTE_ARGS1(e1,v);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TE_ARGS1 ::= TE_ARGS1 COMA BOOL ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTE_ARGS1 e1 = (SymbolTE_ARGS1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubBool);
                                                                                //TS.posaArgs(e1.id, e2, arg);
                                                                                TS.afegir(e2,arg);
                                                                                descripcion d = TS.consultarD(e1.id);
                                                                                variable v=new variable(e2,tipoSub.tipoSubBool,tp.getNP());
                                                                                int t= tv.addVariable(new variable(e2,tipoSub.tipoSubBool, tp.getNP()));
                                                                                RESULT = new SymbolTE_ARGS1(e1.id,v,e1.tArg);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CND ::= SCND P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolSCND e1 = (SymbolSCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                String e = e1.getEtiqueta().getEtiqueta();
                                                                                OperandoC3A desti = new OperandoC3A(e,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CND ::= CCND P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCCND e1 = (SymbolCCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                OperandoC3A desti = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SCND ::= COND LPAREN EL RPAREN LCLAVE NEWLINE 
            {
              SymbolSCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String et = e.novaET();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta), true));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCND",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SCND ::= COND LPAREN AO RPAREN LCLAVE NEWLINE 
            {
              SymbolSCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolAO e1 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String et = e.novaET();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta), true));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCND",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CCND ::= SCND P NEWLINE RCLAVE ECOND LCLAVE NEWLINE 
            {
              SymbolCCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolSCND e1 = (SymbolSCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                                                                String efi = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(efi,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                RESULT = new SymbolCCND(new Etiqueta(efi)); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CCND",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EL ::= ELp MENOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENOR, e3, e4);
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                //CREAMOS LOS DOS OPERANDOS CON LAS POSIBLES ETIQUETAS
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                //if e3 ® e4 goto desti1 (PREGUNTAR SI ESTA BIEN PLANTEADO, TENGO DUDAS DE SI NOS FALTA EL GOTO AHI)
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LT,op1,op2,desti1));
                                                                                //t = 0
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //goto desti2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                //skip e1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                //t = -1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //skip e2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EL ::= ELp MAYOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYOR, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                 System.out.println("-------------------------------------------------------------------------------------0"+tv.obtenUltimaVariable().idVariable);
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);                                                        
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);                                                                                 
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.IFGT,op1,op2,desti1));
                                                                                
                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));//---------------------------------------------------------------------------------------------------------------------------------------
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EL ::= ELp IGUAL IGUAL ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.IGUAL, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EL ::= ELp MAYIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EL ::= ELp MENIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTS ::= ENTER ID IGUAL ELp ADD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTS ::= ENTER ID IGUAL ELp MUL ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTS ::= ENTER ID IGUAL ELp DIV ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTS ::= ENTER ID IGUAL ELp MOD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTS ::= ENTER ID IGUAL ELp SUB ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTS ::= ID IGUAL ELp ADD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTS ::= ID IGUAL ELp MUL ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTS ::= ID IGUAL ELp DIV ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTS ::= ID IGUAL ELp MOD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTS ::= ID IGUAL ELp SUB ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1=TS.consultarD(e1);
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELp ::= numero 
            {
              SymbolELp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                RESULT = new SymbolELp(Integer.parseInt(v), true);
                                                                                //tengo que revisar como lo hacemos con los literales
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELp ::= ENTER ID IGUAL numero PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);                                                                                   
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(v,TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELp ::= ENTER ID IGUAL SUB numero PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                String s = "-"+v;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(s,TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELp ::= SUB numero 
            {
              SymbolELp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                String s = "-"+v;
                                                                                RESULT = new SymbolELp(Integer.parseInt(s), true);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELp ::= ENTER ID IGUAL ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                //generar codigo error 68k
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e2+"- no ha sido declarada previamente";                                                                                
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+"  La variable -"+e2+"- no ha sido declarada previamente");                                                                                
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){      
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ");
                                                                                }
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELp ::= ENTER ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELp ::= ID 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                int id = tv.getIdVariable(e1);
                                                                                if(id == -1){    
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                RESULT = new SymbolELp(e1);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELp ::= CONST ID IGUAL VBOOL PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                variable v1=new variable(e1,tipoSub.tipoSubBool, tp.getNP());
                                                                                v1.constante=true;
                                                                                //tv.addVariable(v1);
                                                                                descripcion d;
                                                                                if("cert".equals(v)){
                                                                                d = new descripcion(tipoDescripcion.Constant, tipoSub.tipoSubBool,-1);
                                                                                v1.valor=-1;
                                                                                }else{        
                                                                                d = new descripcion(tipoDescripcion.Constant, tipoSub.tipoSubBool,0);
                                                                                v1.valor=0;
                                                                                }
                                                                                tv.addVariable(v1);
                                                                                TS.afegir(e1,d);
                                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELp ::= CONST ID IGUAL numero PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		descripcion d = new descripcion(tipoDescripcion.Constant, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);                                                                                   
                                                                                variable v1=new variable(e1,tipoSub.tipoSubBool, tp.getNP());
                                                                                v1.constante=true;
                                                                                v1.valor=Integer.parseInt(v);
                                                                                tv.addVariable(v1);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELp ::= ENTER ID IGUAL CRIDAS 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCRIDAS e2 = (SymbolCRIDAS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EB ::= BOOL ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 != null){
                                                                                System.out.println("ERROR: La variable "+e1+" ya ha sido declarada previamente");
                                                                                er.causaError= "ERROR: La variable "+e1+" ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR: La variable -"+e1+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                tv.addVariable(new variable(e1,tipoSub.tipoSubBool, tp.getNP()));
                                                                                descripcion d;
                                                                                if("cert".equals(e2)){
                                                                                d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool,-1);
                                                                                }else{        
                                                                                d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool,0);
                                                                                }
                                                                                TS.afegir(e1,d);
                                                                                if("fals".equals(e2)){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable),true));
                                                                                }
                                                                                if("cert".equals(e2)){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable),true));
                                                                                }
                                                                                } 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EB ::= BOOL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);  
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EB ::= ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                               // System.out.println("ERROR: La variable -"+e1+"- no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                //System.out.println("ERROR: la variable debe de ser booleana");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"-  debe de ser booleana";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"-  debe de ser booleana");
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }
                                                                                if(e2.equals("cert")){
                                                                                d1.valorBool = -1;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }else{        
                                                                                d1.valorBool = 0;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }
                                                                                } 
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EB ::= ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                //System.out.println("ERROR: La variable debe de ser booleana");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- debe de ser booleana";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- debe de ser booleana");
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+"  La variable -"+e2+"- no ha sido declarada previamente");
                                                                                }
                                                                                }}
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EB ::= BOOL ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EB ::= ID IGUAL numero PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");

                                                                                }else if(d1.tipoS!=tipoSub.tipoSubInt){
                                                                                //System.out.println("ERROR: la variable debe de ser un ENTERO");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- la variable debe de ser un ENTERO";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- la variable debe de ser un ENTERO");
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }else{
                                                                                int id = tv.getIdVariable(e1);
                                                                                variable v1 = tv.get(id);
                                                                                OperandoC3A op2 = new OperandoC3A(v,TiposOperandoC3A.enteroLit);
                                                                                OperandoC3A desti = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op2,desti));
                                                                                }
                                                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EB ::= ID IGUAL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                 if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d2 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS != d2.tipoS){
                                                                                System.out.println("ERROR NO COINCIDEN LOS TIPOS");
                                                                                report_error("No coinciden los tipos \""+e2+"\"", new SymbolEB());
                                                                                }else{
                                                                                if(d1.tipoDesc==tipoDescripcion.Constant){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e1+"- es constante y no se puede modificar sus valores");
                                                                                }
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable))); 
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EB ::= BOOL ID IGUAL CRIDAS 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCRIDAS e2 = (SymbolCRIDAS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EB ::= BOOL ID IGUAL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                //generar codigo error 68k
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));

                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- no ha sido declarada previamente");                                                                                
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){  
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));

                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ");
                                                                                }
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolEB();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RetInstr ::= RETORNA ID PNTCM 
            {
              SymbolRetInstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable "+e1+" no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                RESULT = new SymbolRetInstr();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable "+e1+" no ha sido declarada previamente");
                                                                                
                                                                                }else{
                                                                                if(d1.tipoS == tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolRetInstr(true);
                                                                                }else{
                                                                                RESULT = new SymbolRetInstr(false);
                                                                                }
                                                                                //Procedimiento p = tp.tablaP.get(tp.getNP());
                                                                                //c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(p.idProcedimiTiposInstruccionC3A.RTN,null,null,new OperandoC3A(e1, TiposOperandoC3A.etiqueta)));ento, TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.RTN,null,null,new OperandoC3A(e1, TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RetInstr ::= RETORNA numero PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RetInstr ::= RETORNA VBOOL PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RetInstr ::= 
            {
              SymbolRetInstr RESULT =null;
		
                                                                                RESULT = new SymbolRetInstr(false);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.RTN,null,null,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
